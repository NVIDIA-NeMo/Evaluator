# Copyright (c) 2025, NVIDIA CORPORATION. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
name: "Test Template"
description: "Template for running NeMo tests in a containerized environment"

inputs:
  timeout:
    description: "Max runtime of test in minutes"
    required: false
    default: "60"
  script:
    description: "Test script to execute"
    required: true
  is_optional:
    description: "Failure will cancel all other tests if set to true"
    required: false
    default: "false"
  is_unit_test:
    description: "Upload coverage as unit test"
    required: false
    default: "false"
  package:
    description: "Package to test"
    required: true

runs:
  using: "composite"
  steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        path: Eval

    - name: Build container
      shell: bash
      run: |
        echo ::group::Build test container
        docker build -f docker/Dockerfile.ci --build-arg PACKAGE=${{ inputs.package }} -t eval .
        echo ::endgroup::

    - name: Start container
      shell: bash
      run: |
        echo ::group::Start test container
        cmd=$(cat <<RUN_TEST_EOF
        #!/bin/bash
        docker container rm -f nemo_container_${{ github.run_id }} || true
        docker run \
          --rm \
          -d \
          --name nemo_container_${{ github.run_id }} \
          --shm-size=64g \
          --env TRANSFORMERS_OFFLINE=0 \
          --env HYDRA_FULL_ERROR=1 \
          --env HF_HOME=/home/TestData/HF_HOME \
          --env RUN_ID=${{ github.run_id }} \
          --volume $(pwd)/Eval:/workspace \
          eval \
          bash -c "sleep $(( ${{ inputs.timeout }} * 60 + 60 ))"
        RUN_TEST_EOF
        )

        echo "$cmd" | tee "retry_job.sh"
        bash retry_job.sh
        echo ::endgroup::

    - name: Create run-script
      id: create
      shell: bash
      run: |
        echo ::group::Create run-script
        COVERAGE_PREFIX=$([[ "${{ inputs.is_unit_test }}" == "true" ]] && echo "unit-test" || echo "e2e")
        echo "coverage-prefix=$COVERAGE_PREFIX" | tee -a "$GITHUB_OUTPUT"

        cmd=$(cat <<'RUN_TEST_EOF'
        #!/bin/bash

        docker exec -t nemo_container_${{ github.run_id }} bash -c '
          set -e
          cd packages/${{ inputs.package }}
          bash tests/${{ inputs.is_unit_test == 'true' && 'unit_tests' || 'functional_tests' }}/${{ inputs.script }}.sh
        '

        RUN_TEST_EOF
        )

        echo "timeout_in_seconds=$(( ${{ inputs.timeout }} * 60 ))" | tee -a "$GITHUB_OUTPUT"
        echo "$cmd" | tee "job.sh"
        echo ::endgroup::

    - name: Run main script
      uses: nick-fields/retry@v3
      id: run-main-script
      with:
        timeout_seconds: ${{ steps.create.outputs.timeout_in_seconds }}
        max_attempts: 3
        shell: bash
        retry_on: timeout
        command: /bin/bash job.sh
        on_retry_command: /bin/bash retry_job.sh

    - name: Check result
      id: check
      shell: bash
      run: |
        echo ::group::Check result
        docker cp nemo_container_${{ github.run_id }}:/workspace/packages/${{ inputs.package }}/.coverage .coverage.${{ inputs.package }}

        coverage_report=coverage-${{ steps.create.outputs.coverage-prefix }}-${{ github.run_id }}-$(uuidgen)
        echo "coverage_report=$coverage_report" >> "$GITHUB_OUTPUT"

        EXIT_CODE=${{ steps.run-main-script.outputs.exit_code }}
        IS_SUCCESS=$([[ "$EXIT_CODE" -eq 0 ]] && echo "true" || echo "false")

        if [[ "$IS_SUCCESS" == "false" && "${{ inputs.is_optional }}" == "true" ]]; then
          echo "::warning:: Test failed, but displayed as successful because it is marked as optional."
          IS_SUCCESS=true
        fi

        if [[ "$IS_SUCCESS" == "false" ]]; then
          echo Test did not finish successfully.
          exit 1
        fi

        exit $EXIT_CODE
        echo ::endgroup::

    - name: Test coverage
      shell: bash -x -e -u -o pipefail {0}
      run: |
        echo ::group::Test coverage
        docker exec -t nemo_container_${{ github.run_id }} bash -c 'cd /workspace/packages/${{ inputs.package }} && /opt/venv/bin/coverage report -i'
        echo ::endgroup::

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: ${{ steps.check.outputs.coverage_report != 'none' }}
      with:
        name: ${{ steps.check.outputs.coverage_report }}
        path: |
          .coverage.${{ inputs.package }}
        include-hidden-files: true
