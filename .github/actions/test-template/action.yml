# Copyright (c) 2025, NVIDIA CORPORATION. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
name: "Test Template"
description: "Template for running NeMo tests in a containerized environment"

inputs:
  timeout:
    description: "Max runtime of test in minutes"
    required: false
    default: "60"
  script:
    description: "Test script to execute"
    required: true
  is_optional:
    description: "Failure will cancel all other tests if set to true"
    required: false
    default: "false"
  type_of_test:
    description: "Type of test to run"
    required: false
    default: "unit_tests"
  package:
    description: "Package to test. Only required for unit and functional tests."
    required: false
  use-credentials:
    description: "Use credentials for test"
    required: false
    default: "false"
  ngc-api-user:
    description: "NGC API user"
    required: false
    default: "false"
  ngc-api-key:
    description: "NGC API key"
    required: false
    default: "false"
  cpu-only:
    description: "CPU only"
    required: false
    default: "true"
  has-azure-credentials:
    description: "Has Azure credentials"
    required: false
    default: "false"
  azure-client-id:
    description: "Azure client ID"
    required: false
    default: "false"
  azure-tenant-id:
    description: "Azure tenant ID"
    required: false
    default: "false"
  azure-subscription-id:
    description: "Azure subscription ID"
    required: false
    default: "false"

runs:
  using: "composite"
  steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        path: Eval

    - name: Validate type of test
      shell: bash
      run: |
        echo ::group::Validate type of test
        if [[ "${{ inputs.type_of_test }}" != "unit_tests" && "${{ inputs.type_of_test }}" != "functional_tests" && "${{ inputs.type_of_test }}" != "integration_tests" ]]; then
          echo "Invalid type of test: ${{ inputs.type_of_test }}"
          exit 1
        fi
        echo ::endgroup::

    - name: Use credentials
      shell: bash
      if: ${{ inputs.use-credentials == 'true' }}
      run: |
        echo ::group::Use credentials
        echo ${{ inputs.ngc-api-key }} | docker login -u '${{ inputs.ngc-api-user }}' --password-stdin nvcr.io
        echo ::endgroup::

    - name: Build container for unit and functional tests
      shell: bash
      if: ${{ inputs.type_of_test != 'integration_tests' }}
      run: |
        echo ::group::Build test container
        docker build -f docker/Dockerfile.ci \
          --build-arg PACKAGE=${{ inputs.package }} \
          -t eval .
        echo ::endgroup::

    - name: Build container for integration tests
      shell: bash
      if: ${{ inputs.type_of_test == 'integration_tests' }}
      run: |
        echo ::group::Build test container
        docker build -f docker/Dockerfile.ci-integration \
          -t eval .
        echo ::endgroup::

    - name: Azure Login
      if: ${{ inputs.has-azure-credentials == 'true' }}
      uses: azure/login@v2
      with:
        client-id: ${{ inputs.azure-client-id }}
        tenant-id: ${{ inputs.azure-tenant-id }}
        subscription-id: ${{ inputs.azure-subscription-id }}

    - name: Azure Fileshare
      if: ${{ inputs.has-azure-credentials == 'true' && inputs.type_of_test != 'unit-tests' }}
      shell: bash
      id: azure-fileshare
      run: |
        echo "::group::Mount SMB drive"
        sudo apt update
        sudo apt install -y cifs-utils

        RESOURCE_GROUP_NAME="azure-gpu-vm-runner_group"
        STORAGE_ACCOUNT_NAME="nemocistorageaccount2"
        FILE_SHARE_NAME="fileshare"

        MNT_PATH="/mnt/datadrive"

        sudo mkdir -p $MNT_PATH

        # Create a folder to store the credentials for this storage account and
        # any other that you might set up.
        CREDENTIAL_ROOT="/etc/smbcredentials"
        sudo mkdir -p "/etc/smbcredentials"

        # Get the storage account key for the indicated storage account.
        # You must be logged in with az login and your user identity must have
        # permissions to list the storage account keys for this command to work.
        STORAGE_ACCOUNT_KEY=$(az storage account keys list \
            --resource-group $RESOURCE_GROUP_NAME \
            --account-name $STORAGE_ACCOUNT_NAME \
            --query "[0].value" --output tsv | tr -d '"')

        # Create the credential file for this individual storage account
        SMB_CREDENTIAL_FILE="$CREDENTIAL_ROOT/$STORAGE_ACCOUNT_NAME.cred"
        if [ ! -f $SMB_CREDENTIAL_FILE ]; then
            echo "username=$STORAGE_ACCOUNT_NAME" | sudo tee $SMB_CREDENTIAL_FILE > /dev/null
            echo "password=$STORAGE_ACCOUNT_KEY" | sudo tee -a $SMB_CREDENTIAL_FILE > /dev/null
        else
            echo "The credential file $SMB_CREDENTIAL_FILE already exists, and was not modified."
        fi

        # Change permissions on the credential file so only root can read or modify the password file.
        sudo chmod 600 $SMB_CREDENTIAL_FILE

        # This command assumes you have logged in with az login
        HTTP_ENDPOINT=$(az storage account show --resource-group $RESOURCE_GROUP_NAME --name $STORAGE_ACCOUNT_NAME --query "primaryEndpoints.file" --output tsv | tr -d '"')
        SMB_PATH=$(echo $HTTP_ENDPOINT | cut -c7-${#HTTP_ENDPOINT})$FILE_SHARE_NAME

        STORAGE_ACCOUNT_KEY=$(az storage account keys list --resource-group $RESOURCE_GROUP_NAME --account-name $STORAGE_ACCOUNT_NAME --query "[0].value" --output tsv | tr -d '"')

        sudo mount -t cifs $SMB_PATH $MNT_PATH -o credentials=$SMB_CREDENTIAL_FILE,serverino,nosharesock,actimeo=30,mfsymlinks,fsc,cache=strict

        ls -al $MNT_PATH/TestData
        echo "::endgroup::"

    - name: Start container
      shell: bash
      env:
        MOUNT_FS: ${{ inputs.type_of_test == 'integration_tests' || inputs.type_of_test == 'functional_tests' }}
      run: |
        echo "::group::Start test container"
        if [[ "$MOUNT_FS" == "true" ]]; then
          ls -al /mnt/datadrive/TestData
          VOLUME_ARGS="--volume /mnt/datadrive/TestData:/home/TestData"
        else
          VOLUME_ARGS=""
        fi

        cmd=$(cat <<RUN_TEST_EOF
        #!/bin/bash
        docker container rm -f nemo_container_${{ github.run_id }} || true

        ARG=("")
        if [[ "${{ inputs.type_of_test }}" == "integration_tests" ]]; then
          ARG=(--runtime=nvidia --gpus all)
        fi

        docker run \
          --rm \
          -d \
          --name nemo_container_${{ github.run_id }} \
          "${ARG[@]}" \
          --shm-size=64g \
          --env TRANSFORMERS_OFFLINE=1 \
          --env HYDRA_FULL_ERROR=1 \
          --env HF_HUB_CACHE_PATH=/home/TestData/HF_HOME/hub \
          --env HF_HOME=/home/TestData/HF_HOME \
          --env RUN_ID=${{ github.run_id }} \
          --volume $(pwd)/Eval:/workspace \
          $VOLUME_ARGS \
          eval \
          bash -c "sleep $(( ${{ inputs.timeout }} * 60 + 60 ))"
        RUN_TEST_EOF
        )

        echo "$cmd" | tee "retry_job.sh"
        bash retry_job.sh
        echo ::endgroup::

    - name: Create run-script
      id: create
      shell: bash
      run: |
        echo ::group::Create run-script
        COVERAGE_PREFIX=$([[ "${{ inputs.type_of_test }}" == "unit_tests" ]] && echo "unit-test" || echo "e2e")
        echo "coverage-prefix=$COVERAGE_PREFIX" | tee -a "$GITHUB_OUTPUT"

        cmd=$(cat <<'RUN_TEST_EOF'
        #!/bin/bash

        docker exec -t nemo_container_${{ github.run_id }} bash -c '
          set -e
          if [[ "${{ inputs.type_of_test }}" != "integration_tests" ]]; then
            cd packages/${{ inputs.package }}
            bash tests/${{ inputs.type_of_test == 'unit_tests' && 'unit_tests' || 'functional_tests' }}/${{ inputs.script }}.sh
          else
            bash tests/integration_tests/Launch_Integration_Tests.sh
          fi
        '

        RUN_TEST_EOF
        )

        echo "timeout_in_seconds=$(( ${{ inputs.timeout }} * 60 ))" | tee -a "$GITHUB_OUTPUT"
        echo "$cmd" | tee "job.sh"
        echo ::endgroup::

    - name: Run main script
      uses: nick-fields/retry@v3
      id: run-main-script
      with:
        timeout_seconds: ${{ steps.create.outputs.timeout_in_seconds }}
        max_attempts: 3
        shell: bash
        retry_on: timeout
        command: /bin/bash job.sh
        on_retry_command: /bin/bash retry_job.sh

    - name: Check result
      id: check
      shell: bash
      run: |
        echo ::group::Check result
        docker cp nemo_container_${{ github.run_id }}:/workspace/packages/${{ inputs.package }}/.coverage .coverage.${{ inputs.package }}

        coverage_report=coverage-${{ steps.create.outputs.coverage-prefix }}-${{ github.run_id }}-$(uuidgen)
        echo "coverage_report=$coverage_report" >> "$GITHUB_OUTPUT"

        EXIT_CODE=${{ steps.run-main-script.outputs.exit_code }}
        IS_SUCCESS=$([[ "$EXIT_CODE" -eq 0 ]] && echo "true" || echo "false")

        if [[ "$IS_SUCCESS" == "false" && "${{ inputs.is_optional }}" == "true" ]]; then
          echo "::warning:: Test failed, but displayed as successful because it is marked as optional."
          IS_SUCCESS=true
        fi

        if [[ "$IS_SUCCESS" == "false" ]]; then
          echo Test did not finish successfully.
          exit 1
        fi

        exit $EXIT_CODE
        echo ::endgroup::

    - name: Test coverage
      shell: bash -x -e -u -o pipefail {0}
      run: |
        echo ::group::Test coverage
        docker exec -t nemo_container_${{ github.run_id }} bash -c 'cd /workspace/packages/${{ inputs.package }} && /opt/venv/bin/coverage report -i'
        echo ::endgroup::

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: ${{ steps.check.outputs.coverage_report != 'none' }}
      with:
        name: ${{ steps.check.outputs.coverage_report }}
        path: |
          .coverage.${{ inputs.package }}
        include-hidden-files: true
